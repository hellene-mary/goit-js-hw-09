{"mappings":"qhBAOA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAkBpC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MA1BPL,EAAKa,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAMC,iBAEN,MAAMC,EAAaC,SAASjB,EAAKkB,SAASb,MAAMc,OAC1CC,EAAOH,SAASjB,EAAKkB,SAASE,KAAKD,OACnCE,EAASJ,SAASjB,EAAKkB,SAASG,OAAOF,OAE7CG,QAAQC,IAAI,YAAYP,cAAuBI,gBAAmBC,MAqBpE,SAA4BL,EAAYI,EAAMC,GAC5C,IAAIG,EAAQR,EACZ,IAAK,IAAIS,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAChCD,EAAQR,EAAaI,GAAQK,EAAI,GAEjCtB,EAAcsB,EAAGD,GACdE,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MAEjBsB,EAAA7B,GAAS8B,OAAOC,QAAQ,qBAAqBzB,QAAeC,UAE7DyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAElBsB,EAAA7B,GAAS8B,OAAOG,QAAQ,oBAAoB3B,QAAeC,UA/BjE2B,CAAmBhB,EAAYI,EAAMC,GAErCP,EAAMmB,cAAcC","sources":["src/js/03-promises.js"],"sourcesContent":["//TODO\n//Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n//         delay: перша затримка\n//         step: крок збільшення затримки для кожного промісу після першого\n//         amount: кількість промісів, яку необхідно створити\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n\n  const firstDelay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  console.log(` delay: '${firstDelay}', step: '${step}', amount: '${amount}'`);\n\n  fulfillmentPromise(firstDelay, step, amount);\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction fulfillmentPromise(firstDelay, step, amount) {\n  let delay = firstDelay;\n  for (let i = 1; i <= amount; i += 1) {\n    delay = firstDelay + step * (i - 1);\n\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\n//Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","firstDelay","parseInt","elements","value","step","amount","console","log","delay1","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$fulfillmentPromise","currentTarget","reset"],"version":3,"file":"03-promises.73c62e9d.js.map"}